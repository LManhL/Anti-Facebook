import 'package:flutter/material.dart';
import 'package:expandable_text/expandable_text.dart';
import 'package:it4788/model;s/article.dart';

class ArticleScreen extends StatefulWidget {
  const ArticleScreen({super.key});
  @override
  State<ArticleScreen> createState() {
    return _ArticleScreenState();
  }
}

class _ArticleScreenState extends State<ArticleScreen> {
  int kudosCount = 10;
  int disappointedCount = 12;
  late int totalFeels;

  int getTotalFeels() {
    totalFeels = kudosCount + disappointedCount;
    return totalFeels;
  }

  bool isClickKudos = false;
  bool isClickDisappointed = false;

  void handleClickKudos() {
    setState(() {
      isClickKudos = !isClickKudos;
      kudosCount = isClickKudos ? kudosCount + 1 : kudosCount - 1;
    });
  }

  void handleClickDisappointed() {
    setState(() {
      isClickDisappointed = !isClickDisappointed;
      disappointedCount =
          isClickDisappointed ? disappointedCount + 1 : disappointedCount - 1;
    });
  }

  String formatTimeDifference(DateTime from, DateTime to) {
    Duration difference = to.difference(from);

    if (difference.inSeconds < 60) {
      return '${difference.inSeconds} seconds ago';
    } else if (difference.inMinutes < 60) {
      return '${difference.inMinutes} minutes ago';
    } else if (difference.inHours < 24) {
      return '${difference.inHours} hours ago';
    } else {
      int days = difference.inDays;
      return '$days ${days == 1 ? 'day' : 'days'} ago';
    }
  }

  final List<Article> _articleList = [
    Article(
        id: '1',
        image: [
          'https://flutter.github.io/assets-for-api-docs/assets/widgets/owl-2.jpg',
          'https://flutter.github.io/assets-for-api-docs/assets/widgets/owl.jpg',
          'https://flutter.github.io/assets-for-api-docs/assets/widgets/owl.jpg',
          'https://flutter.github.io/assets-for-api-docs/assets/widgets/owl.jpg',
        ],
        described:
            'üè∏ Sau ti·∫øng tr·ªëng d√†i c·ªßa ti·∫øt h·ªçc cu·ªëi c√πng vang l√™n, c√°c l·ªõp h·ªçc t·∫°i khu√¥n vi√™n Tr∆∞·ªùng THPT ƒê·ªìng Quan c≈©ng d·∫ßn t·∫Øt ƒë√®n. Kh√¥ng kh√≠ nh√† xe nh·ªôn nh·ªãp h∆°n bao gi·ªù h·∫øt v·ªõi ti·∫øng c∆∞·ªùi ƒë√πa vui v·∫ª c·ªßa c√°c b·∫°n h·ªçc sinh ƒëang ƒë·ª©ng ƒë·ª£i l·∫•y xe d∆∞·ªõi b√≥ng c√¢y m√°t m·∫ª. R·ªìi c·ª© th·∫ø th∆∞a d·∫ßn ƒëi theo th·ªùi gian, c√°c b·∫°n d·∫ßn quay tr·ªü v·ªÅ ng√¥i nh√† c·ªßa m√¨nh. Cho ƒë·∫øn khi nh√† xe th∆∞a b·ªõt, nh·ªØng vƒÉn h√≥asinh ho·∫°t bu·ªïi chi·ªÅu t·∫°i Tr∆∞·ªùng Q ch√≠nh th·ª©c ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu.  M·ªôt, hai nh√≥m ch∆°i b√≥ng chuy·ªÅn, b√≥ng r·ªï hay th·∫≠m ch√≠ l√† ƒë√° c·∫ßu, c·∫ßu l√¥ng,.. Nh·ªØng m√¥n th·ªÉ thao n√†y t·ª´ l√¢u ƒë√£ r·∫•t ƒë∆∞·ª£c ∆∞a chu·ªông t·∫°i ƒë√¢y. T·ª´ b√™n ngo√†i, ng∆∞·ªùi ta c≈©ng c√≥ th·ªÉ nghe th·∫•y b·∫ßu kh√¥ng kh√≠ s√¥i ƒë·ªông t·ª´ nh·ªØng b·ªô m√¥n n√†y v·ªçng ra t·ª´ trong s√¢n tr∆∞·ªùng Q ƒë·∫ßy huy√™n n√°o. üèê ƒê·∫∑c bi·ªát trong th√°ng 11 n√†y, m·ªói g√≥c s√¢n tr∆∞·ªùng ƒë·ªÅu m·ªü m·ªôt b√†i h√°t kh√°c nhau v·ªõi giai ƒëi·ªáu nh·∫π nh√†ng, du d∆∞∆°ng , ƒë√≥ nh·ªØng b√†i h√°t ƒë∆∞·ª£c chu·∫©n b·ªã cho ng√†y Nh√† Gi√°o Vi·ªát Nam - 20/11 s·∫Øp t·ªõi. N√≥ ƒë√£ g√≥p ph·∫ßn l√†m tƒÉng l√™n s·ª± ƒë√¥ng ƒë√∫c, s√¥i n·ªïi c·ªßa tr∆∞·ªùng Q sau gi·ªù h·ªçc. ',
        created: DateTime.now().subtract(const Duration(minutes: 30)),
        feel: 100,
        kudos: 50,
        disappointed: 50,
        author: Author(
            authorId: '1',
            username: 'CLB S√°ch v√† H√†nh ƒê·ªông Tr∆∞·ªùng THPT ƒê·ªìng Quan',
            avatar: 'https://picsum.photos/250?image=9'))
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: ListView.builder(
        itemCount: _articleList.length,
        itemBuilder: (context, index) {
          return _buildArticleItem(_articleList[index]);
        },
      ),
    );
  }

  Widget _buildImageSection(List<String> images) {
    if (images.length == 1) {
      return Image.network(images[0],
          height: 400, width: double.infinity, fit: BoxFit.cover);
    } else if (images.length == 2) {
      return GridView.builder(
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
        ),
        shrinkWrap: true,
        physics: const NeverScrollableScrollPhysics(),
        itemCount: images.length,
        itemBuilder: (context, index) {
          return Padding(
            padding: const EdgeInsets.symmetric(horizontal: 1),
            child: Image.network(images[index],
                height: 400, width: double.infinity, fit: BoxFit.cover),
          );
        },
      );
    } else if (images.length == 3) {
      return Row(
        children: [
          Expanded(
            child: Image.network(images[0], height: 400, fit: BoxFit.cover),
          ),
          Expanded(
            child: Column(
              children: [
                Padding(
                  padding: const EdgeInsets.only(left: 4, bottom: 2),
                  child: Image.network(images[1],
                      height: 198, width: double.infinity, fit: BoxFit.cover),
                ),
                Padding(
                  padding: const EdgeInsets.only(left: 4, top: 2),
                  child: Image.network(images[1],
                      height: 198, width: double.infinity, fit: BoxFit.cover),
                ),
              ],
            ),
          ),
        ],
      );
    } else if (images.length >= 4) {
      return GridView.builder(
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
        ),
        shrinkWrap: true,
        physics: const NeverScrollableScrollPhysics(),
        itemCount: images.length,
        itemBuilder: (context, index) {
          return Padding(
            padding: const EdgeInsets.all(1),
            child: Image.network(images[index],
                height: 200, width: double.infinity, fit: BoxFit.cover),
          );
        },
      );
    } else {
      return Container();
    }
  }

  Widget _buildArticleItem(Article article) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 10),
      child: Column(
        children: [
          const SizedBox(height: 100),
          Row(
            children: [
              Padding(
                padding: const EdgeInsets.only(left: 8, right: 8),
                child: ClipOval(
                  child: CircleAvatar(
                    backgroundColor: Colors.brown.shade800,
                    radius: 28,
                    child: Image.network(_articleList[0].author.avatar),
                  ),
                ),
              ),
              Container(
                constraints: const BoxConstraints(
                  maxWidth: 280,
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      _articleList[0].author.username,
                      overflow: TextOverflow.ellipsis,
                      maxLines: 2,
                      style: const TextStyle(
                          fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    Row(
                      children: [
                        Text(formatTimeDifference(
                                _articleList[0].created, DateTime.now())
                            .toString()),
                        const Padding(
                          padding: EdgeInsets.symmetric(horizontal: 4),
                          child: Text('.'),
                        ),
                        const Icon(Icons.public)
                      ],
                    )
                  ],
                ),
              ),
              // const Spacer(),
              const Padding(
                  padding: EdgeInsets.only(right: 8), child: BottomPopup())
            ],
          ),
          Padding(
            padding: const EdgeInsets.all(10),
            child: Align(
              alignment: Alignment.topLeft,
              child: ExpandableText(
                _articleList[0].described,
                style: const TextStyle(fontSize: 16),
                expandText: 'show more',
                collapseText: 'show less',
                maxLines: 3,
              ),
            ),
          ),
          _buildImageSection(article.image),
          Padding(
            padding: const EdgeInsets.all(10),
            child: Row(children: [
              const Icon(
                Icons.favorite,
                color: Color.fromARGB(255, 232, 43, 29),
              ),
              const Icon(
                Icons.mood_bad_rounded,
              ),
              Text(getTotalFeels().toString()),
              Spacer(),
              Text('42 comments')
            ]),
          ),
          const Divider(
            height: 2,
          ),
          Padding(
            padding: const EdgeInsets.symmetric(vertical: 10),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    Expanded(
                      child: GestureDetector(
                        onTap: () {
                          handleClickKudos();
                        },
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(Icons.favorite,
                                color: isClickKudos
                                    ? Color.fromARGB(255, 232, 43, 29)
                                    : Colors.black),
                            const Padding(padding: EdgeInsets.only(right: 4)),
                            const Text('kudos'),
                          ],
                        ),
                      ),
                    ),
                    Expanded(
                      child: GestureDetector(
                        onTap: () {
                          handleClickDisappointed();
                        },
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(Icons.mood_bad_outlined,
                                color: isClickDisappointed
                                    ? Color.fromARGB(255, 232, 208, 29)
                                    : Colors.black),
                            const Padding(padding: EdgeInsets.only(right: 4)),
                            Text('disappointed'),
                          ],
                        ),
                      ),
                    ),
                    Expanded(
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.message_outlined),
                          Padding(padding: EdgeInsets.only(right: 4)),
                          Text('comment'),
                        ],
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class BottomPopup extends StatelessWidget {
  const BottomPopup({super.key});

  @override
  Widget build(BuildContext context) {
    return Center(
      child: SizedBox(
        width: 50,
        height: 50,
        child: TextButton(
          child: const Icon(Icons.more_horiz),
          onPressed: () {
            showModalBottomSheet<void>(
              context: context,
              builder: (BuildContext context) {
                return SizedBox(
                  height: 300,
                  child: Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      mainAxisSize: MainAxisSize.min,
                      children: <Widget>[
                        TextButton(
                          child: const Row(
                            children: [
                              Padding(
                                padding: EdgeInsets.symmetric(horizontal: 10),
                                child: Icon(Icons.notifications_off_rounded),
                              ),
                              Text('T·∫Øt th√¥ng b√°o v·ªÅ b√†i vi·∫øt n√†y'),
                            ],
                          ),
                          onPressed: () => Navigator.pop(context),
                        ),
                        TextButton(
                          child: const Row(
                            children: [
                              Padding(
                                padding: EdgeInsets.symmetric(horizontal: 10),
                                child: Icon(Icons.save_alt_rounded),
                              ),
                              Text('L∆∞u b√†i vi·∫øt'),
                            ],
                          ),
                          onPressed: () => Navigator.pop(context),
                        ),
                        TextButton(
                          child: const Row(
                            children: [
                              Padding(
                                padding: EdgeInsets.symmetric(horizontal: 10),
                                child: Icon(Icons.delete),
                              ),
                              Text('X√≥a'),
                            ],
                          ),
                          onPressed: () => Navigator.pop(context),
                        ),
                        TextButton(
                          child: const Row(
                            children: [
                              Padding(
                                padding: EdgeInsets.symmetric(horizontal: 10),
                                child: Icon(Icons.edit),
                              ),
                              Text('Ch·ªânh s·ª≠a b√†i vi·∫øt'),
                            ],
                          ),
                          onPressed: () => Navigator.pop(context),
                        ),
                        TextButton(
                          child: const Row(
                            children: [
                              Padding(
                                padding: EdgeInsets.symmetric(horizontal: 10),
                                child: Icon(Icons.link),
                              ),
                              Text('Sao ch√©p li√™n k·∫øt'),
                            ],
                          ),
                          onPressed: () => Navigator.pop(context),
                        ),
                      ],
                    ),
                  ),
                );
              },
            );
          },
        ),
      ),
    );
  }
}
